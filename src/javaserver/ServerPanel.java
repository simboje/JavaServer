/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Simba
 */
public class ServerPanel extends javax.swing.JFrame
{
    ServerSocket socket=null;
    int portNumber=50000;
    Connection conn=null;
    BufferedReader br;
    PrintWriter pw;
    String connString = "jdbc:mysql://localhost:3306/chatserver";
    Statement stat;
    ArrayList<UserData> usersList = new ArrayList();
    /**
     * Creates new form ServerPanel
     */
    public ServerPanel()
    {
        initComponents();
        Thread t = new Thread(new ClientReceiver());
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Send to clients");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Log");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField1ActionPerformed
    {//GEN-HEADEREND:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        pw.println(jTextField1.getText());
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ServerPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private class ClientReceiver implements Runnable
    {

        public ClientReceiver()
        {
        }

        @Override
        public void run()
        {
            
            try
            {
                connToDatabase();
                socket = new ServerSocket(portNumber);
            } 
            catch (Exception ex)
            {
                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            while(true)
            {
                try
                {
                    
                    Socket csocket = socket.accept();
                    br = new BufferedReader(new InputStreamReader(csocket.getInputStream()));
                    pw = new PrintWriter(csocket.getOutputStream(),true);
                    if(readUserData())
                    {
                        pw.println(1);  // 1 - code for succesfull login
                        printUsers();   // num + username for every user
                        printOldMessages(userName); // num + every old message
                        updateUserTime(userName);
                        usersList.add(new UserData(userName,pw));
                        Thread t = new Thread(new ClientHandler(userName,br,pw));
                        t.start();
                    }
                    else
                    {
                        pw.println(2);  // code for bad data or somethin went wrong with the server
                        br.close();
                        pw.close();
                    }
                    
                    
                } 
                catch (IOException ex)
                {
                    Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }

        private void updateUserTime(String userName)
        {
            try
            {
                PreparedStatement statement     = conn.prepareStatement("UPDATE users SET lastlogin=(?) WHERE username=(?)");
                Calendar cal = Calendar.getInstance(); 
                java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());
                statement.setTimestamp(1, timestamp);
                statement.setString(2, userName);                        
                statement.executeUpdate();
            } 
            catch (Exception e)
            {
                System.out.println("Update vremena se ubagovo!"+e.toString());
            }                        
        }

        class ClientHandler implements Runnable
        {
            String uname;
            BufferedReader breader;
            PrintWriter pwriter;
            public ClientHandler(String name,BufferedReader b,PrintWriter p)
            {
                uname = name;
                breader = b;
                pwriter = p;
            }
            @Override
            public void run()
            {
                while(true)
                {
                    try
                    {
                        String sender = br.readLine();
                        String receiver = br.readLine();
                        String msg = br.readLine();
                        Calendar cal = Calendar.getInstance();
                        java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());
                        if(sender.equals(null) || receiver.equals(null) || msg.equals(null))
                        {
                            break;
                        } 
                        else if(receiver.equals("ALL"))
                        {
                            broadcastToAllUsers(sender,receiver,msg,timestamp);
                        }
                        else
                        {
                            broadcastTo(sender,receiver,msg,timestamp);
                        }
                        jTextArea1.append(sender + " > " + receiver + ": " + msg + "\n");
                        PreparedStatement statement     = conn.prepareStatement("INSERT INTO messages (sentby,receiver,message,datesent) VALUES(?,?,?,?)");
                         
                        //java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());
                        statement.setString(1, sender);
                        statement.setString(2, receiver);
                        statement.setString(3, msg);
                        statement.setTimestamp(4, timestamp);                        
                        statement.executeUpdate();
                        
                    } 
                    catch (IOException ex)
                    {
                        Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                        break;
                    } 
                    catch (SQLException ex)
                    {
                        Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                        break;
                    }
                    catch (Exception ex)
                    {
                        System.out.println(ex.toString());
                        break;
                    }
                }
            }

            private void broadcastToAllUsers(String sender, String receiver, String msg,Timestamp ts)
            {
                for(UserData ud:usersList)
                {
                    ud.getPw().println(ts.toString()+" "+sender+": "+msg);
                }
            }

            private void broadcastTo(String sender, String receiver, String msg,Timestamp ts)
            {
                for(UserData ud:usersList)
                {
                    if(ud.getUserName().equals(receiver))
                        ud.getPw().println(ts.toString()+" "+sender+": "+msg);
                }
            }
            
        }
        
        String userName;
        String password;
        private boolean readUserData()
        {
            try
            {
                userName = br.readLine();
                password = br.readLine();
                ResultSet rset = stat.executeQuery("select * from users");
                boolean dataok=true;
                boolean exists=false;
                while(rset.next())
                {
                    if(rset.getString(2).equals(userName))
                    {
                        exists=true;
                        if(!rset.getString(3).equals(password))
                        {
                            dataok=false;
                        }
                    }
                }
                if(!exists)
                {
                    try
                    {
                        PreparedStatement statement     = conn.prepareStatement("INSERT INTO users (username,password,lastlogin) VALUES(?,?,?)");
                        Calendar cal = Calendar.getInstance(); 
                        java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());
                        statement.setString(1, userName);
                        statement.setString(2, password);
                        statement.setTimestamp(3, timestamp);                        
                        statement.executeUpdate();
                    } 
                    catch (Exception e)
                    {
                        dataok=false;
                    }                    
                }
                return dataok;
            } 
            catch (Exception ex)
            {
                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
            
        }

        private void printUsers()
        {
            //pw.println(0);  // just for testing!!!
            try
            {
                ResultSet rset1 = stat.executeQuery("select COUNT(*) from users");
                int br=0;
                while(rset1.next())
                {
                    br=rset1.getInt(1);
                }
                ResultSet rset2 = stat.executeQuery("select username from users");
                pw.println(br);
                while(rset2.next())
                {
                    pw.println(rset2.getString(1));
                }
            } 
            catch (SQLException ex)
            {
                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void printOldMessages(String uName)
        {
            try
            {
                String q = "select lastlogin from users WHERE username=(?)";
                PreparedStatement preparedStatement = conn.prepareStatement(q);
                preparedStatement.setString(1, uName);
                ResultSet rset1 = preparedStatement.executeQuery();
                Timestamp ts=null;
                while(rset1.next())
                {
                    ts=rset1.getTimestamp(1);
                }
                System.out.println("Last login od ovog usera je> "+ts.toString());
                stat=conn.createStatement();
                String query = "SELECT COUNT(*) from messages WHERE (?)<=datesent AND ( receiver=(?) OR receiver='ALL' )";
                PreparedStatement statement     = conn.prepareStatement(query);
                statement.setTimestamp(1, ts);
                statement.setString(2, uName);
                ResultSet rset2 = statement.executeQuery();
                int br=0;
                while(rset2.next())
                {
                    br=rset2.getInt(1);
                }
                System.out.println("Broj poruka za ovog usera je> "+br);
                pw.println(br);
                String queryX = "SELECT sentby,receiver,message,datesent from messages WHERE (?)<=datesent AND receiver=(?)";
                PreparedStatement statementX = conn.prepareStatement(queryX);
                statementX.setTimestamp(1, ts);
                statementX.setString(2, uName);
                ResultSet rset3 = statementX.executeQuery();
                while(rset3.next())
                {
                    System.out.println("Ako ima poruka ovo ce se videti.");
                    pw.println(rset3.getString(1)+"  "+rset3.getString(3));
                }
            } 
            catch (SQLException ex)
            {
                pw.println(0);
                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        
    }
    
    private void connToDatabase()
    {
        try
        {
            conn = DriverManager.getConnection(connString,"root","splendid85");
            stat = conn.createStatement();
        } 
        catch (SQLException ex)
        {
            Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
